version: 2.1

commands:
  checkout-repositories:
    description: "checkout the repositories and set correct publishing url"
    parameters:
      production_branch:
        type: string
        default: master
      test_branch:
        type: string
        default: test
      other_hostname:
        type: string
      test_hostname:
        type: string
      production_hostname:
        type: string
    steps:
      - when:
          condition:
            equal: [ << pipeline.git.branch >>, <<parameters.production_branch>> ]
          steps:
            - run:
                command: $PWD/scripts/checkoutRepositories.sh /tmp/workspace $PWD/config/publication.json
                environment:
                  HOSTNAME: <<parameters.production_hostname>>
      - when:
          condition:
            equal: [ << pipeline.git.branch >>,<<parameters.test_branch>> ]
          steps:
            - run:
                command: $PWD/scripts/checkoutRepositories.sh /tmp/workspace $PWD/config/publication.json
                environment:
                  HOSTNAME: <<parameters.test_hostname>>
      - unless:
          condition:
            not:
              or:
                - equal: [ << pipeline.git.branch >>,<<parameters.test_branch>> ]
                - equal: [ << pipeline.git.branch >>,<<parameters.production_branch>> ]
          steps:
            - run:
                command: $PWD/scripts/checkoutRepositories.sh /tmp/workspace $PWD/config/publication.json
                environment:
                  HOSTNAME: <<parameters.other_hostname>>
jobs:
  checkout:
    parameters:
      production_branch:
        type: string
        default: master
      test_branch:
        type: string
        default: test
      production_folder:
        type: string
        default: production
      test_folder:
        type: string
        default: test
      other_folder:
        type: string
        default: dev
      other_hostname:
        type: string
      test_hostname:
        type: string
      production_hostname:
        type: string
    docker:
      - image: circleci/python
    environment:
      PRODUCTION_BRANCH: <<parameters.production_branch>>
      TEST_BRANCH: <<parameters.test_branch>>
    steps:
      - checkout
      - run: mkdir -p workspace
      - run: ls -al workspace
      - run:
          command: $PWD/scripts/findPublicationsToUpdate.sh /tmp/workspace $PWD/config/publication.json
          environment:
            PRODUCTION_FOLDER: <<parameters.production_folder>>
            TEST_FOLDER: <<parameters.test_folder>>
            OTHER_FOLDER: <<parameters.other_folder>>
      - checkout-repositories:
          production_branch: <<parameters.production_branch>>
          test_branch: <<parameters.test_branch>>
          other_hostname: <<parameters.other_hostname>>
          test_hostname: <<parameters.test_hostname>>
          production_hostname: <<parameters.production_hostname>>
      - run: if [ -e /tmp/workspace/checkouts.txt ] ; then cat /tmp/workspace/checkouts.txt ; fi
      - run: if [ -e /tmp/workspace/rawcheckouts.txt ] ; then cat /tmp/workspace/rawcheckouts.txt ; fi
      - run: if [ -e /home/circleci/project/changes.txt ] ; then cat /home/circleci/project/changes.txt ; fi
      - run:
          name: List the files which have been created
          command: ls -al /tmp/workspace/*
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - checkouts.txt
            - rawcheckouts.txt
            - changedpublications.json
            - haschangedpublications.json
            - links.txt
            - src/
            - raw-input/
  extract-jsonld-details:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:json-ld-format-v3.0.9
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Extract json details from UML diagram(s)
          command: $PWD/scripts/extract-what.sh jsonld
      - run:
          name: Show the report (for debugging purposes)
          command: |
            if [ -d /tmp/workspace/report ] ; then cat /tmp/workspace/report/*.report ; fi
      - run:
          name: List the files which have been created
          command: |
            if [ -d /tmp/workspace/report ] ; then ls -al /tmp/workspace/report/* ; fi
      - run:
          name: Show the errors found (for debugging purposes)
          command:
            egrep " ERROR " /tmp/workspace/report/*.report || true
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - checkouts.txt
            - links.txt
            - report/
            - tsv/
            - json/
            - src/
  validate-report:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:json-ld-format-v3.0.9
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check no errors found in the reports
          command:
            egrep " ERROR " /tmp/workspace/report/*.report || true ;
            [ $( egrep " ERROR " /tmp/workspace/report/*.report | wc -l ) == 0 ] || exit 1
  normalise-jsonld:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:javascript-circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Make sure pretty print is runnable
          workdir: /app/pretty-print
          command: sudo npm install
      - run:
          name: Normalise the recovered JSON-LD files (in the src directory)
          command: |
            $PWD/scripts/pretty-print-jsonfiles.sh /tmp/workspace
            mkdir -p /tmp/workspace/report /tmp/workspace/json /tmp/workspace/json
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - report/
            - json/
            - src/
  render-html-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:javascript-circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render HTML version of merged json file (a)
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace html
            mkdir -p /tmp/workspace/target /tmp/workspace/reporthtml
      - run:
          name: copy the site-skeleton for the html
          command: $PWD/scripts/copy_skeleton.sh
      - run:
          name: List the html files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.html -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
            - reporthtml/
  render-context-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:javascript-circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render Context Details
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace context
            mkdir -p /tmp/workspace/target
      - run:
          name: List the context files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.jsonld -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-shacl-details:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:javascript-circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render Shacl details
          command: |
            $PWD/scripts/render-details.sh /tmp/workspace shacl
            mkdir -p /tmp/workspace/target /tmp/workspace/report
      - run:
          name: List the shacl files found
          command: find /tmp/workspace/target -name \*-SHACL.jsonld -type f
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
            - report/
  convert-json-to-ttl:
    docker:
      - image: circleci/ruby:2.6.5-stretch
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            gem install linkeddata
            mkdir -p /tmp/workspace/target
      - run:
          name: Convert -SHACL.jsonld file to -SHACL.ttl files
          command: |
            find /tmp/workspace/target -name \*-SHACL.jsonld -type f | $PWD/scripts/convert_to_any.sh turtle
      - run:
          name: List the -SHACL.ttl and context files found
          command: |
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*-SHACL.ttl -type f ; fi
            if [ -d /tmp/workspace/target ] ; then find /tmp/workspace/target -name \*.ttl -type f ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  expand-links:
    docker:
      - image: circleci/node:4.8.2
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy raw assets
          workdir: /tmp/workspace
          command: |
            if [ -d raw ] ; then count="$( find raw -mindepth 1 -maxdepth 1 | wc -l )" ; if [ $count -ne 0 ] ; then cp -R raw/* /tmp/workspace/target/ ; fi  ; fi
      - run:
          name: expand default links
          command: |
            $PWD/scripts/expand-links.sh /tmp/workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  render-voc-rdf:
    docker:
      - image: circleci/ruby:2.6.5-stretch
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            gem install linkeddata
            mkdir -p /tmp/workspace/voc
            mkdir -p /tmp/workspace/target
      - run:
          name: Generate vocabulary in baseformat jsonld
          command: |
            $PWD/scripts/generate-voc.sh /tmp/workspace json $PWD/config
            mkdir -p /tmp/workspace/target/doc/vocabularium
      - run:
          name: Convert vocabulary to turtle
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh turtle
      - run:
          name: Convert vocabulary to ntriples
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh ntriples
      - run:
          name: Convert vocabulary to rdf/xml
          command: |
            find /tmp/workspace/target/doc/vocabularium -name \*.jsonld -type f | $PWD/scripts/convert_to_any.sh rdfxml
      - run:
          name: list results
          command: |
            if [ -d /tmp/workspace/voc ]; then ls /tmp/workspace/voc ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - target/
  copy-raw:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: List the files which should have been created
          command: |
            if [ -d /tmp/workspace/raw-input ] ; then ls -al /tmp/workspace/raw-input ; fi
      - run:
          name: copy /raw-input to where it is needed
          command: $PWD/scripts/extract-raw.sh raw
      - run:
          name: List the subdirs in raw
          command: |
            if [ -d /tmp/workspace/raw ] ; then ls -al /tmp/workspace/raw; else mkdir -p /tmp/workspace/raw ; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - raw/
  create-artifact:
    parameters:
      repository:
        type: string
    docker:
      - image: circleci/node
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "84:ef:18:e6:4c:b3:fa:38:4e:d2:47:09:e9:be:0f:e6"
      - run:
          name: Checkout target repo
          workdir: /tmp
          command: |
            rm -rf generated
            git clone <<parameters.repository>> generated
      - run:
          name: clean the generated directory
          workdir: /tmp/generated
          command: |
            git fetch origin
            git checkout -b "${CIRCLE_BRANCH}" --track "origin/${CIRCLE_BRANCH}"
            if [ "`cat /tmp/workspace/haschangedpublications.json`" == "false" ] ; then git rm -r --force * ; fi
      - run:
          name: Copy static assets
          command: |
            cp -R site-skeleton/* /tmp/generated/
      - run:
          name: Copy generated assets
          workdir: /tmp/workspace
          command: |
            mkdir -p /tmp/generated/report
            if [ -d target ] ; then if [ ! "$(ls -A target)" ] ; then echo "directory target is empty" ; else cp -R target/* /tmp/generated ; fi fi
            if [ -d report ] ; then if [ ! "$(ls -A report)" ] ; then echo "directory report is empty" ; else cp -R report/* /tmp/generated/report ; fi fi
            if [ -d reporthtml ] ; then if [ ! "$(ls -A reporthtml)" ] ; then echo "directory reporthtml is empty" ; else cp -R reporthtml/* /tmp/generated/report ; fi fi
            if [ -d json ] ; then if [ ! "$(ls -A json)" ] ; then echo "directory json is empty" ; else cp -R json/*   /tmp/generated/report ; fi fi
      - run:
          name: List the files which have been created
          workdir: /tmp/generated
          command: |
            ls -al *
            if [ -d report ] ; then ls -al report/* ; fi
            find report
      - run:
          name: insert the commit
          workdir: /tmp/generated
          command: |
            export TAG=`echo "${CIRCLE_SHA1}" | cut -c1-15`
            echo "{\"commit\" : \"$TAG\"}" > report/commit.json
      - run:
          name: Push results to github
          workdir: /tmp/generated
          command: |
            git config user.email "oslo@kb.vlaanderen.be"
            git config user.name "Circle CI Builder"
            git add .
            git status
            git commit -m "Applying changes from commit ${CIRCLE_SHA1}" --allow-empty
            export TAG=`echo "${CIRCLE_SHA1}" | cut -c1-15`
            git tag "${TAG}"
            git push --force origin "${CIRCLE_BRANCH}"
            git push --tags
workflows:
  version: 2
  generate_documentation:
    jobs:
      - checkout:
          test_branch: test
          production_branch: production
          other_folder: dev
          test_folder: test
          production_folder: production
          other_hostname: https://dev.data.vlaanderen.be
          test_hostname: https://test.data.vlaanderen.be
          production_hostname: https://data.vlaanderen.be
      - extract-jsonld-details:
          requires:
            - checkout
      - normalise-jsonld:
          requires:
            - extract-jsonld-details
      - validate-report:
          requires:
            - extract-jsonld-details
      - render-html-details:
          requires:
            - normalise-jsonld
      - render-voc-rdf:
          requires:
            - normalise-jsonld
      - render-shacl-details:
          requires:
            - normalise-jsonld
      - convert-json-to-ttl:
          requires:
            - render-shacl-details
      - render-context-details:
          requires:
            - normalise-jsonld
      - expand-links:
          requires:
            - copy-raw
            - render-context-details
            - convert-json-to-ttl
            - render-voc-rdf
            - render-html-details
      - copy-raw:
          requires:
            - checkout
      - create-artifact:
          repository: git@github.com:Informatievlaanderen/OSLO-Generated.git
          requires:
            - expand-links
